{
	"info": {
		"_postman_id": "2d84dca5-f50d-42c0-8add-0da0a5925a5f",
		"name": "Adjutor_API_Service",
		"description": "Adjutor is the API service from Lendsqr provided via RESTful APIs. The services include the following:\n\n- Authorizing direct debit, with consent, for repayments\n- Getting the bank accounts, with consent, tied to a customer's BVN\n- Matching a customer image against what's on their BVN\n- Getting the name and details of a bank account number\n- Getting credit information about a borrower\n- Getting \"probable\" fraud information from our Karma blacklist\n- Accessing credit performance information, for a borrower, from the Lendsqr ecosystem\n    \n\n## Getting Started\n\nTo have access to our APIs is easy.\n\n1. [Sign up for a Lendsqr Adjutor account](https://app.adjutor.io/signup?source=adjutor-api-documentation)\n    \n2. Then create an app and select the services required fror the app\n    \n\nðŸ“º [You can watch a quick video guide of how to get your API key](https://vimeo.com/916390665/9ab2925a54?share=copy).\n\n## Terms of Use\n\nTo use Lendsqr Adjutor APIs, you must agree to our terms of use. These terms outline the conditions under which you may access and use our API. Please review these terms carefully before using our API. If you have any questions or concerns about these terms, please contact us at [support@lendsqr.com](https://mailto:support@lendsqr.com). [https://adjutor.io/privacy#terms-of-use](https://adjutor.io/privacy#terms-of-use)\n\n[You read about our terms here](https://adjutor.io/privacy#terms-of-use).\n\n## Getting Support\n\nIf you require assistance at any time when using this documentation or the services, please email [support@lendsqr.com](https://mailto:support@lendsqr.com) and someone would be in touch with you as soon as possible. If you are currently using Lendsqr to lend, you can also contact your account manager at [growth@lendsqr.com](https://mailto:growth@lendsqr.com).\n\n---\n\n# Authentication\n\nAuthentication to the Adjutor API service is performed with the API key. Every endpoint requires authentication, so you will need to add the following header to each request:\n\n`Authorization: Bearer`\n\n`base_url: https://adjutor.lendsqr.com/v2/`\n\n---\n\n# Data Types\n\nAll of the API responses returned are in JSON format, with these data types defined below:\n\n| Type | Description |\n| --- | --- |\n| `string` | A UTF-8 encoded string |\n| `number` | An integer |\n| `datetime` | An ISO8601 encoded DateTime. All datetimes are returned in UTC with offset +00:00 |\n| `decimal` | All monetary values are returned with up to two decimal places and may be positive (20.78) or negative (-32.50) |\n\n# Data Length\n\n| Type | Description | Length |\n| --- | --- | --- |\n| Text fields | `string` | max-length 255 characters |\n| BVN | `integers` starting with 1 or 2 | 11 digits. |\n| Account Number | `integers` | 10 digits. |\n\n---\n\n# Response\n\n| Field | Type | Description |\n| --- | --- | --- |\n| data | `array` | The actual data items you have requested |\n| meta | `object` | Key/value information that is not essential to understanding the resources returned but offers additional detail |\n\n# Meta\n\n| Field | Type | Description |\n| --- | --- | --- |\n| cost | `number` | The cost for the API call in Naira |\n| balance | `number` | The remaining balance in your service wallet in Naira |\n\n---\n\n# Errors\n\nErrors are expressed as a combination of HTTP status codes and an accompanying JSON body providing required detail where possible. You should be able to rely on the HTTP status code alone to determine the cause of the problem.\n\n## Error Response Fields\n\n| Field | Type |\n| --- | --- |\n| message | `string` A human-readable message as to the specifics of the problem. For example, it may contain a detail description of what caused the problem |\n| status number | The HTTP status code used in the response |\n| error_code | `number` |\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14462346",
		"_collection_link": "https://lunar-star-153150.postman.co/workspace/DEMOTEST~8a13b9c1-1de3-47f9-94c4-2aaa6f1a1dc8/collection/14462346-2d84dca5-f50d-42c0-8add-0da0a5925a5f?action=share&source=collection_link&creator=14462346"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Bank Verification Number",
					"item": [
						{
							"name": "Initialize BVN Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate 'status code'\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Body Validation\", function () {\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Validate 'status' field\r",
											"pm.expect(responseBody).to.have.property('status');\r",
											"pm.expect(responseBody.status).to.equal('otp');\r",
											"\r",
											"// Validate 'message' field\r",
											"pm.expect(responseBody).to.have.property('message');\r",
											"pm.expect(responseBody.message).to.equal('Please provide OTP sent to contact');\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.expect(responseBody).to.have.property('message');\r",
											"pm.expect(responseBody.message).to.be.a('string');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contact\": \"07011725297\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}verification/bvn/:bvn",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"bvn",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22182412389"
										}
									]
								},
								"description": "This endpoint is used to initiate the process for getting the customer's consent. The integrator is required to pass the customer's BVN and the phone number. If the phone number passed does not match the customer phone on record, an error is returned but with a masked collection of the correct phone and email on the customer account.\n\n#### Request Body\n\n| Field | Type | Description |\n| --- | --- | --- |\n| contact | `String` | The phone number or email of the customer. At the minimum, the phone number must be the one registered to the BVN (e.g., 08012345678, [ado@example.com](https://mailto:ado@example.com)). |"
							},
							"response": [
								{
									"name": "Initialize BVN",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contact\": \"0808***2636\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://adjutor.lendsqr.com/v2/verification/bvn/:bvn",
											"protocol": "https",
											"host": [
												"adjutor",
												"lendsqr",
												"com"
											],
											"path": [
												"v2",
												"verification",
												"bvn",
												":bvn"
											],
											"variable": [
												{
													"key": "bvn",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 21 Feb 2024 07:04:59 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "91cddf27-e8c8-4475-a69f-41d3cfd2c78e"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 21 Feb 2024 07:04:38 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"75-9VH2gGmZSDLe6+ZLGrXFVt5sc5Y\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "858d22e9cc0a6622-AMS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"otp\",\n    \"message\": \"Please provide OTP sent to contact\",\n    \"data\": \"0808***2636\",\n    \"meta\": {\n        \"cost\": 0,\n        \"balance\": 4815\n    }\n}"
								}
							]
						},
						{
							"name": "Complete Consent and get BVN Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Script for Validating Successful Response Body\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Body Validation\", function () {\r",
											"let responseBody = pm.response.json();\r",
											"\r",
											"// Validate 'status' field\r",
											"pm.expect(responseBody).to.have.property('status');\r",
											"pm.expect(responseBody.status).to.equal('success');\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.expect(responseBody).to.have.property('message');\r",
											"pm.expect(responseBody.message).to.be.a('string');\r",
											"\r",
											"// Validate 'message' field\r",
											"pm.expect(responseBody).to.have.property('message');\r",
											"pm.expect(responseBody.message).to.equal('Successful');\r",
											"\r",
											"// Validate 'data' object and its properties\r",
											"pm.expect(responseBody).to.have.property('data');\r",
											"pm.expect(responseBody.data).to.be.an('object');\r",
											"pm.expect(responseBody.data).to.have.property('reference');\r",
											"pm.expect(responseBody.data.reference).to.equal(4067003);\r",
											"pm.expect(responseBody.data).to.have.property('bvn');\r",
											"pm.expect(responseBody.data.bvn).to.equal('22182412389');\r",
											"pm.expect(responseBody.data).to.have.property('first_name');\r",
											"pm.expect(responseBody.data.first_name).to.equal('MARY');\r",
											"pm.expect(responseBody.data).to.have.property('middle_name');\r",
											"pm.expect(responseBody.data.middle_name).to.equal('DONATUS');\r",
											"pm.expect(responseBody.data).to.have.property('last_name');\r",
											"pm.expect(responseBody.data.last_name).to.equal('FRANCIS');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp\": \"863564\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}verification/bvn/:bvn",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"bvn",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22182412389"
										}
									]
								},
								"description": "This endpoint is used to get the BVN data after the customer's consent has been approved.\n\n### Response fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reference | `integer` | Unique reference number (e.g., 10000001) |\n| bvn | `string` | Bank Verification Number (e.g., \"22123456789\") |\n| first_name | `string` | First name of the individual (e.g., \"ADO\") |\n| middle_name | `string` | Middle name of the individual (e.g., \"JOHN\") |\n| last_name | `string` | Last name of the individual (e.g., \"SULE\") |\n| dob | `date` | Date of birth in YYYY-MM-DD format (e.g., \"1990-10-31\") |\n| formatted_dob | `date` | Formatted date of birth (e.g., \"1990-10-31\") |\n| mobile2 | `string` | Secondary mobile number, if applicable (e.g., 08012345678) |\n| mobile | `string` | Primary mobile number (e.g., \"08012345678\") |\n| registration_date | `string` | Date of registration (e.g., \"30-Mar-2015\") |\n| enrollment_bank | `string` | Bank enrollment number (e.g., \"044\") |\n| enrollment_branch | `string` | Branch of enrollment (e.g., \"RET SHOP - BABCOCK UNIVERSITY (137)\") |\n| email | `string` | Email address (e.g., \"[wunmi@yahoo.com](https://mailto:wunmi@yahoo.com)\") |\n| gender | `string` | Gender (e.g., \"Male\") |\n| level_of_account | `string` | Level of account, if applicable (e.g., Tier 2) |\n| lga_of_origin | `string` | Local Government Area of origin (e.g., \"Abeokuta South\") |\n| lga_of_residence | `string` | Local Government Area of residence (e.g., \"Abeokuta South\") |\n| marital_status | `string` | Marital status (e.g., \"Single\") |\n| nin | `string` | National Identification Number, if applicable (e.g., 1234567890) |\n| name_on_card | `string` | Name as it appears on card (e.g., \"ADO JOHN SULE\") |\n| nationality | `string` | Nationality, if applicable (e.g., American) |\n| residential_address | `string` | Residential address (e.g., \"Ogun State\") |\n| state_of_origin | `string` | State of origin (e.g., \"Ogun State\") |\n| state_of_residence | `string` | State of residence (e.g., \"Ogun State\") |\n| watchlisted | `integer` | Watchlist status (e.g., 0 for not watchlisted) |\n| image_url | `string` | URL of the photo (e.g., \"[https://picsum.photos/id/1/5000/3333\"](https://picsum.photos/id/1/5000/3333)) |"
							},
							"response": [
								{
									"name": "Complete BVN Verification",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"otp\": \"242366\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://adjutor.lendsqr.com/v2/verification/bvn/:bvn",
											"protocol": "https",
											"host": [
												"adjutor",
												"lendsqr",
												"com"
											],
											"path": [
												"v2",
												"verification",
												"bvn",
												":bvn"
											],
											"variable": [
												{
													"key": "bvn",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 21 Feb 2024 07:05:26 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "e522b3f8-6d99-4a10-88e1-e4b962c1f854"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 21 Feb 2024 07:05:14 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"3de-C/X9feDDVRhWa/gVl6sTmdaWpko\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "858d23c7ba346622-AMS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"reference\": 10000001,\n        \"bvn\": \"22123456789\",\n        \"first_name\": \"ADO\",\n        \"middle_name\": \"JOHN\",\n        \"last_name\": \"SULE\",\n        \"dob\": \"1990-10-31\",\n        \"formatted_dob\": \"1990-10-31\",\n        \"mobile2\": null,\n        \"mobile\": \"08012345678\",\n        \"registration_date\": \"30-Mar-2015\",\n        \"enrollment_bank\": \"044\",\n        \"enrollment_branch\": \"RET SHOP - BABCOCK UNIVERSITY (137)\",\n        \"email\": \"wunmi@yahoo.com\",\n        \"gender\": \"Male\",\n        \"level_of_account\": null,\n        \"lga_of_origin\": \"Abeokuta South\",\n        \"lga_of_residence\": \"Abeokuta South\",\n        \"marital_status\": \"Single\",\n        \"nin\": null,\n        \"name_on_card\": \"ADO JOHN SULE\",\n        \"nationality\": null,\n        \"residential_address\": \"Ogun State\",\n        \"state_of_origin\": \"Ogun State\",\n        \"state_of_residence\": \"Ogun State\",\n        \"watchlisted\": 0,\n        \"base64Image\": null,\n        \"image_url\": \"https://picsum.photos/id/1/5000/3333\"\n    },\n    \"meta\": {\n        \"cost\": 20,\n        \"balance\": 4815\n    }\n}"
								}
							]
						}
					],
					"description": "Bank Verification Number (BVN) is the national ID system created by Nigerian banks to uniquely identified bank customers in the Nigerian banking ecosystem.\n\nThese endpoints allows you to get the details of a BVN for a customer only after the customer has granted an explicit consent.\n\nThis works in a two stage process where the initial API call initiates the process, and a One Time Password (OTP) is sent to the customer's registered phone or email address. When the customer provides this OTP, the second stage verifies the OTP and provides the BVN information.\n\n### Known issues\n\n- OTP may not be delivered to the customer's phone on time or at all.\n    \n- OTP may be delivered to the customer's phone late due to GSM network delays\n    \n- Customer may not remember or have access to the phones or emails on record which means they may never be able to provide consent"
				},
				{
					"name": "Verify Customer Bank Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for Validating Bank Account Response Body\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body Validation\", function () {\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Validate 'status' field\r",
									"pm.expect(responseBody).to.have.property('status');\r",
									"pm.expect(responseBody.status).to.equal('success');\r",
									"\r",
									"// Validate that 'message' is present and is a string\r",
									"pm.expect(responseBody).to.have.property('message');\r",
									"pm.expect(responseBody.message).to.be.a('string');\r",
									"\r",
									"// Validate 'message' field\r",
									"pm.expect(responseBody).to.have.property('message');\r",
									"pm.expect(responseBody.message).to.equal('Successful');\r",
									"\r",
									"// Validate 'data' object and its properties\r",
									"pm.expect(responseBody).to.have.property('data');\r",
									"pm.expect(responseBody.data).to.be.an('object');\r",
									"pm.expect(responseBody.data).to.have.property('bank_code');\r",
									"pm.expect(responseBody.data.bank_code).to.equal('011');\r",
									"pm.expect(responseBody.data).to.have.property('account_name');\r",
									"pm.expect(responseBody.data.account_name).to.equal('FRANCIS MARY DONATUS');\r",
									"pm.expect(responseBody.data).to.have.property('account_number');\r",
									"pm.expect(responseBody.data.account_number).to.equal('3159643779');\r",
									"\r",
									"// Validate 'meta' object and its properties\r",
									"pm.expect(responseBody).to.have.property('meta');\r",
									"pm.expect(responseBody.meta).to.be.an('object');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"account_number\": \"3159643779\",\n    \"bank_code\": \"011\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}verification/bankaccount",
							"host": [
								"{{base_url}}verification"
							],
							"path": [
								"bankaccount"
							]
						},
						"description": "This endpoint is used for verification of a customer's bank account.\n\n#### Payload\n\n`account_number`: `required` account number to be verified\n\n`bank_code`: `required` the bank code for the account number\n\n#### Response Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bank_code | `string` | Central Bank of Nigeria code identifying the bank (e.g., \"058\") |\n| bank_name | `string` | Name of the bank (e.g., \"Example Bank Plc\") |\n| account_name | `string` | Name associated with the account (e.g., \"DOE JOHN\") |\n| account_number | `string` | Account number (e.g., \"0425571111\") |\n| bvn | `string` | Bank Verification Number. The middle 7 numbers are masked with 0s (e.g., \"22000000021\") |"
					},
					"response": [
						{
							"name": "Verify Customer Bank Account",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account_number\": \"0425571111\",\n    \"bank_code\": \"058\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}verification/bankaccount/bvn",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"bankaccount",
										"bvn"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 10 Aug 2023 14:43:21 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "45a5849d-e413-474f-966d-ac800803a5f8"
								},
								{
									"key": "Last-Modified",
									"value": "Thu, 10 Aug 2023 14:43:21 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"c9-19Gwq+rB7O302vWla1jPDh/+TTI\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f4902b9bb13046b-CDG"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"bank_code\": \"058\",\n        \"account_name\": \"DOE JOHN\",\n        \"account_number\": \"0425571111\",\n        \"bvn\": \"22000000021\"\n    },\n    \"meta\": {\n        \"cost\": 10,\n        \"balance\": 1245\n    }\n}"
						}
					]
				},
				{
					"name": "Check Karma for Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for Validating 'Identity not found in karma' Response Body\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body Validation\", function () {\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Validate 'status' field\r",
									"pm.expect(responseBody).to.have.property('status');\r",
									"pm.expect(responseBody.status).to.equal('success');\r",
									"\r",
									"// Validate 'message' field\r",
									"pm.expect(responseBody).to.have.property('message');\r",
									"pm.expect(responseBody.message).to.equal('Identity not found in karma');\r",
									"\r",
									"// Validate 'meta' object and its 'balance' property\r",
									"pm.expect(responseBody).to.have.property('meta');\r",
									"pm.expect(responseBody.meta).to.be.an('object');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}verification/karma/:identity",
							"host": [
								"{{base_url}}verification"
							],
							"path": [
								"karma",
								":identity"
							],
							"variable": [
								{
									"key": "identity",
									"value": "07011725297"
								}
							]
						},
						"description": "Karma is a database of blacklisted bad actors within the Lendsqr ecosystem. A bad actor is someone who has been involved with fraud or has tried to request loans with fake identity. A bad actor may also be a chronic defaulter whose loan has been written off.\n\nThis endpoint is used to check if a customer is on the blacklist of bad actors.\n\n#### Path Variables\n\n`identity`: `required` Identity of customer which could be one of the following:\n\n| Field | Description | Format Example |\n| --- | --- | --- |\n| Email Address | Format should be in the form of [email@example.com](https://mailto:email@example.com) | [email@example.com](https://mailto:email@example.com) |\n| Phone Number | Format should be in the form of +2347012345678 | +2347012345678 |\n| Domain Name | Format should be in the form of example.com | example.com |\n| BVN | Format should be in the form of 22212345678 | 22212345678 |\n| NUBAN Account number | Format should be in the form of XXX-1234567890 Where XXX is the CBN bank code | 070-1234567890 for a Fidelity Bank account. |\n| Images | Format is Base64 | Base64 encoded string |\n\n#### Response Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| karma_identity | `string` | Unique identifier for karma (e.g., \"0zspgifzbo.ga\") |\n| amount_in_contention | `string` | Amount involved in contention (e.g., \"0.00\") |\n| reason | `string` | Reason for the karma entry, if applicable (e.g., null) |\n| default_date | `date` | Date of default (e.g., \"2020-05-18\") |\n| karma_type | `object` | Type of karma (e.g., {\"karma\": \"Others\"}) |\n| karma_identity_type | `object` | Type of identity associated with karma (e.g., {\"identity_type\": \"Domain\"}) |\n| reporting_entity | `object` | Entity reporting the karma (e.g., {\"name\": \"Blinkcash\", \"email\": \"[support@blinkcash.ng](https://mailto:support@blinkcash.ng)\"}) |"
					},
					"response": [
						{
							"name": "Check Karma for Customer",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}verification/karma/:identity",
									"host": [
										"{{base_url}}verification"
									],
									"path": [
										"karma",
										":identity"
									],
									"variable": [
										{
											"key": "identity",
											"value": "0zspgifzbo.ga"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 08 Aug 2023 14:26:38 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "0150a3b9-1e2e-4bc1-825e-f4bb024f7463"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 08 Aug 2023 14:26:38 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"157-/X62qo9vh7N9XNeVvLk5BxWrnvs\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f386f7a0fc9d430-LOS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"karma_identity\": \"0zspgifzbo.ga\",\n        \"amount_in_contention\": \"0.00\",\n        \"reason\": null,\n        \"default_date\": \"2020-05-18\",\n        \"karma_type\": {\n            \"karma\": \"Others\"\n        },\n        \"karma_identity_type\": {\n            \"identity_type\": \"Domain\"\n        },\n        \"reporting_entity\": {\n            \"name\": \"Blinkcash\",\n            \"email\": \"support@blinkcash.ng\"\n        }\n    },\n    \"meta\": {\n        \"cost\": 10,\n        \"balance\": 1600\n    }\n}"
						}
					]
				}
			],
			"description": "The Validation APIs are resources and tools for validating customer information. These validation processes make use of APIs that allow you to confirm the accuracy of customer information using their Bank Verification Numbers (BVNs), email addresses, or phone numbers.\n\nThe APIs are designed to help you ensure that customer information is accurate and up-to-date, providing you with a reliable and efficient method for validating customer data."
		},
		{
			"name": "Credit Bureaus",
			"item": [
				{
					"name": "Get Credit Report from CRC Credit Bureau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for Validating 'No CRC History' Error Response Body\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body Validation\", function () {\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Validate 'status' field\r",
									"pm.expect(responseBody).to.have.property('status');\r",
									"pm.expect(responseBody.status).to.equal('error');\r",
									"\r",
									"// Validate 'message' field\r",
									"pm.expect(responseBody).to.have.property('message');\r",
									"pm.expect(responseBody.message).to.equal('No CRC History');\r",
									"\r",
									"// Validate 'meta' object and its 'balance' property\r",
									"pm.expect(responseBody).to.have.property('meta');\r",
									"pm.expect(responseBody.meta).to.be.an('object');\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}creditbureaus/crc/:bvn",
							"host": [
								"{{base_url}}creditbureaus"
							],
							"path": [
								"crc",
								":bvn"
							],
							"variable": [
								{
									"key": "bvn",
									"value": "22182412389",
									"description": "This must be a valid Bank Verification Number"
								}
							]
						},
						"description": "This request is used to check the CRC database for the credit history of a customer using their BVN.\n\n#### Path Variables\n\n`bvn`: `required` The BVN of the customer."
					},
					"response": [
						{
							"name": "Get Credit Report from CRC Credit Bureau",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}creditbureaus/crc/:bvn",
									"host": [
										"{{base_url}}creditbureaus"
									],
									"path": [
										"crc",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22293381111"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 08 Aug 2023 14:45:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "b0a64f17-3b9c-486a-bcd9-238c74c8dc6b"
								},
								{
									"key": "Last-Modified",
									"value": "Tue, 08 Aug 2023 14:45:11 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"3a9-O71eH/thvISxq/G7zT9AeNi1Bl4\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f388aa9590fc4fc-LOS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"consdisclaimer\": {\n            \"getdisclaimercontent\": {\n                \"_x0031_\": \"1\"\n            }\n        },\n        \"consumer_relation\": \"\",\n        \"last_checked_date\": \"2023-06-29 12:00:40\",\n        \"credit_nano_summary\": {\n            \"summary\": {\n                \"last_reported_date\": \"31-MAY-2023\",\n                \"has_creditfacilities\": \"YES\",\n                \"no_of_delinqcreditfacilities\": \"2\"\n            }\n        },\n        \"mfcredit_nano_summary\": {\n            \"summary\": {\n                \"last_reported_date\": \"31-MAY-2023\",\n                \"has_creditfacilities\": \"YES\",\n                \"no_of_delinqcreditfacilities\": \"1\"\n            }\n        },\n        \"mgcredit_nano_summary\": {\n            \"summary\": {\n                \"has_creditfacilities\": \"NO\",\n                \"no_of_delinqcreditfacilities\": \"0\"\n            }\n        },\n        \"nano_consumer_profile\": {\n            \"consumer_details\": {\n                \"name\": \"JOHN DOE\",\n                \"ruid\": \"1112020002201111\",\n                \"gender\": \"001\",\n                \"last_name\": \"DOE\",\n                \"first_name\": \"JOHN\",\n                \"citizenship\": \"NG\",\n                \"date_of_birth\": \"01-OCT-1960\",\n                \"identification\": {\n                    \"ruid\": \"1112020002201111\",\n                    \"id_value\": \"22293381111\",\n                    \"source_id\": \"BVN\",\n                    \"id_display_name\": \"Business Verification Number\"\n                }\n            }\n        }\n    },\n    \"meta\": {\n        \"cost\": 100,\n        \"balance\": 1355\n    }\n}"
						}
					]
				},
				{
					"name": "Get Credit Report from FirstCentral Credit Bureau",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script for Validating Credit Report Response Body\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body Validation\", function () {\r",
									"let responseBody = pm.response.json();\r",
									"\r",
									"// Validate 'status' field\r",
									"pm.expect(responseBody).to.have.property('status');\r",
									"pm.expect(responseBody.status).to.equal('success');\r",
									"\r",
									"// Validate 'message' field\r",
									"pm.expect(responseBody).to.have.property('message');\r",
									"pm.expect(responseBody.message).to.equal('Successful');\r",
									"\r",
									"// Validate 'data' array and its contents\r",
									"pm.expect(responseBody).to.have.property('data');\r",
									"pm.expect(responseBody.data).to.be.an('array');\r",
									"\r",
									"// Validate 'meta' object and its properties\r",
									"pm.expect(responseBody).to.have.property('meta');\r",
									"pm.expect(responseBody.meta).to.be.an('object');\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}creditbureaus/firstcentral/:bvn",
							"host": [
								"{{base_url}}creditbureaus"
							],
							"path": [
								"firstcentral",
								":bvn"
							],
							"variable": [
								{
									"key": "bvn",
									"value": "22182412389",
									"description": "This must be a valid Bank Verification Number"
								}
							]
						},
						"description": "This request is used to check the CRC database for the credit history of a customer using their BVN.\n\n#### Path Variables\n\n`bvn`: `required` The BVN of the customer."
					},
					"response": [
						{
							"name": "Get Credit Report from FirstCentral Credit Bureau",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}creditbureaus/firstcentral/:bvn",
									"host": [
										"{{base_url}}creditbureaus"
									],
									"path": [
										"firstcentral",
										":bvn"
									],
									"variable": [
										{
											"key": "bvn",
											"value": "22293381111"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 14 Aug 2023 13:26:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "215fcd37-0d7f-4fc8-9031-7fa20e55bad0"
								},
								{
									"key": "Last-Modified",
									"value": "Mon, 14 Aug 2023 13:26:10 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"5da-eIapFMBHh+VQsgkRqx4HYnwZad4\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "7f698727981103d6-LIS"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": [\n        {\n            \"SubjectList\": [\n                {\n                    \"Reference\": \"2663443\",\n                    \"ConsumerID\": \"2663443\",\n                    \"SearchOutput\": \"DOE JANE, dantata estate kubwa abuja\"\n                }\n            ]\n        },\n        {\n            \"PersonalDetailsSummary\": [\n                {\n                    \"Gender\": \"Female\",\n                    \"Header\": \"PERSONAL DETAILS SUMMARY: DOE JANE\",\n                    \"Surname\": \"DOE\",\n                    \"BirthDate\": \"19/03/1997\",\n                    \"FirstName\": \"JANE\",\n                    \"OtheridNo\": \"\",\n                    \"CellularNo\": \"2348169591111\",\n                    \"ConsumerID\": \"2663443\",\n                    \"Dependants\": \"0\",\n                    \"OtherNames\": \"\",\n                    \"PassportNo\": null,\n                    \"PencomIDNo\": \"\",\n                    \"Nationality\": \"Nigeria\",\n                    \"ReferenceNo\": null,\n                    \"EmailAddress\": \"\",\n                    \"NationalIDNo\": \"\",\n                    \"MaritalStatus\": null,\n                    \"EmployerDetail\": null,\n                    \"PostalAddress1\": \"DANTATA ESTATE ABUJA FEDERAL CAPITAL TERRITORY\",\n                    \"PostalAddress2\": \"15\",\n                    \"PostalAddress3\": \"\",\n                    \"PostalAddress4\": \" Nigeria\",\n                    \"HomeTelephoneNo\": \"2348169591111\",\n                    \"WorkTelephoneNo\": \"2348169591111\",\n                    \"DriversLicenseNo\": null,\n                    \"PropertyOwnedType\": \"\",\n                    \"BankVerificationNo\": \"22293381111\",\n                    \"ResidentialAddress1\": \"10nasiru dantata estate kubwa abuja\",\n                    \"ResidentialAddress2\": \"\",\n                    \"ResidentialAddress3\": \"\",\n                    \"ResidentialAddress4\": \" \"\n                }\n            ]\n        },\n        {\n            \"CreditSummary\": [\n                {\n                    \"NumberofAccountsInBadStanding\": \"0\",\n                    \"TotalNumberOfAccountsReported\": \"6\",\n                    \"NumberOfAccountsInGoodStanding\": \"6\"\n                }\n            ]\n        },\n        {\n            \"PerformanceClassification\": [\n                {\n                    \"NoOfLoansLost\": \"0\",\n                    \"NoOfLoansDoubtful\": \"0\",\n                    \"NoOfLoansPerforming\": \"6\",\n                    \"NoOfLoansSubstandard\": \"1\"\n                }\n            ]\n        },\n        {\n            \"EnquiryDetails\": [\n                {\n                    \"ProductID\": \"63\",\n                    \"MatchingRate\": \"90\",\n                    \"SubscriberEnquiryEngineID\": \"179484634\",\n                    \"SubscriberEnquiryResultID\": \"22059650\"\n                }\n            ]\n        }\n    ],\n    \"meta\": {\n        \"cost\": 100,\n        \"balance\": 1025\n    }\n}"
						}
					]
				}
			],
			"description": "The Credit Bureaus folder contains resources and tools for accessing credit information through credit bureau integrations. Lendsqr is integrated with two of the three major credit bureaus in Nigeria, allowing you to make API calls to these bureaus to check the credit history of customers. This folder provides a convenient way to gather credit information and make informed lending decisions."
		},
		{
			"name": "Decisioning",
			"item": [
				{
					"name": "Get Decision Models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'Successful'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"// Validate that 'message' is present and is a string\r",
									"pm.test(\"Message property is present and is a string\", function () {\r",
									"    var jsonData = pm.response.json(); // Added missing variable declaration\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}decisioning/models",
							"host": [
								"{{base_url}}decisioning"
							],
							"path": [
								"models"
							]
						},
						"description": "This endpoint fetches all the decision models that have been configured for your profile. This would allow you to programmatically iterate and select."
					},
					"response": []
				},
				{
					"name": "Get Decision Model Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'Successful'\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.message).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"// Validate that 'message' is present and is a string\r",
									"pm.test(\"Message property is present and is a string\", function () {\r",
									"    var jsonData = pm.response.json(); // Added missing variable declaration\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}decisioning/models/:id/settings",
							"host": [
								"{{base_url}}decisioning"
							],
							"path": [
								"models",
								":id",
								"settings"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "7942"
								}
							]
						},
						"description": "This endpoint is used to obtain the details of a Decision Model.\n\n#### Path Variables\n\n`id`: `required` The id of the decison model.decision"
					},
					"response": []
				}
			],
			"description": "Risk Acceptance Criteria (RAC) is used as a loan screening tool to guide credit extension and how much risk is acceptable or tolerable. These RAC are implemented with the decisioning APIs.\n\nThese APIs provide quick, easy, and cost-effective solutions for making informed decisions during your loan decision processes, allowing you to make confident and efficient choices with ease.\n\nTo use the Decisioning APIs, you must have designed your decision models and configure them within the Lendsqr admin console.\n\nDecision Models are a living process and lenders are advised to constantly iterate these models as customer behaviors evolve.\n\nCreating a good decision model can be complex, especially at the early stages. Deciding what to include or consider can be a head-scratching moment. If you require additional help on guidance regarding this, please email your account manager at [growth@lendsqr.com](https://mailto:growth@lendsqr.com) and we would be more than happy to help you think through this stage.\n\n[You can read more about our Decision Model at the Lendsqr Help Center](https://lendsqr.freshdesk.com/support/solutions/44000816023)."
		},
		{
			"name": "Oraculi Mobile SDK (Beta)",
			"item": [
				{
					"name": "Get User Accounts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}oraculi/sms/entities/:bvn/accounts",
							"host": [
								"{{base_url}}oraculi"
							],
							"path": [
								"sms",
								"entities",
								":bvn",
								"accounts"
							],
							"variable": [
								{
									"key": "bvn",
									"value": null
								}
							]
						},
						"description": "This endpoint is used to get the accounts associated to a user from their bank SMS.\n\nThis API works for customers who have installed the app that has the SDK on their phones and have also granted access to the SDK to fetch their SMS data.\n\n#### Path Variables\n\n`bvn`: `required` The BVN of the user."
					},
					"response": []
				},
				{
					"name": "Get User Account Transactions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}oraculi/sms/:phone_number/transactions",
							"host": [
								"{{base_url}}oraculi"
							],
							"path": [
								"sms",
								":phone_number",
								"transactions"
							],
							"variable": [
								{
									"key": "phone_number",
									"value": null
								}
							]
						},
						"description": "This endpoint is used to get the transactions associated to a particular bank account from the user's bank SMS.\n\n#### Path Variables\n\n`phone_number`: `required` The phone number registered on the user's bank account."
					},
					"response": []
				}
			],
			"description": "Oraculi is the Lendsqr underwriting scoring engine. Oraculi means The Oracle in Latin.\n\nLendsqr Oraculi provides a RESTful API for accessing user data gathered from your customerâ€™s phones with the SDK you have embedded.\n\nThe Oraculi SDK provides an effective insight into Android customers of lenders. The SDK is only available for Android phones.\n\nThis documentation, and the approach described here, are in Beta. They are subject to change as we take feedback from pilot lenders.\n\n# Installing the SDK\n\nThe Oraculi SDK is a Java native application that can be embedded into any mobile development framework that can instantiate Java within a mobile app. For the purpose of this documentation, it would be assumed to be a React Native application.\n\nThe Java SDK is available on GitHub on a private repo. To get access, please contact support@lendsqr.com. The installation instructions are on the repo README.\n\n### Android Permissions\n\nThe SDK requires the READ_SMS and RECEIVE_SMS permissions which must be explicitly defined within your application Android Manifest.\n\nThese two permissions are classified as dangerous permissions by Google and as such, beyond just declaring them in your application, there are certain guidelines for getting them approved by Google.\n\n## Definitions\n\nItâ€™s important to understand the taxonomy of the Oraculi SDK.\n\n### Entities\n\nWhen the Oraculi SDK collects data from an Android phone, it creates unique identifiers for the user and the phone. However, because the developer has been required to provide an identifier for the user upon the instantiation of the SDK, it would allow the identification of such users irrespective of the different devices they may use.\n\nHowever, at the root of the entity identity are the unique identifiers (UUID) for that mobile device and the session that created the data.\n\n### Institutions\n\nInstitutions define the companies, banks, or other unique stakeholders that have sent SMS or other information to an entity (or a user).\n\n### Transactions\n\nTransactions are the records of the activity of a user or an entity with an institution. It could be an SMS alert representing a financial transaction or a balance alert from a telco.\n\nFor both a bank institution, a credit/debit statement is a measure of funds moving in and out of an account.\n\n## The Oraculi SDK data journey\n\nWhen the mobile app that has the Oraculi SDK is installed, it prompts the user to grant permissions for the required functionality. Kindly note that Google requires extensive screen information to provide clear guidance for the users. If you require guidance, please contact [support@lendsqr.com](https://mailto:support@lendsqr.com).\n\nOnce the permissions have been granted, the SDK would collect the data from the phone, encrypt them, and send them to the Lendsqr backend services for parsing and analysis.\n\nThe developer can then connect to the Lendsqr API endpoints to access the parsed and analyzed data for the loan underwriting workflow.\n\nFor the sake of data consistency, every single transaction is uniquely identified against the user to ensure that even if they uninstall the developer app and reinstall it again, data would not be duplicated.\n\n<img src=\"https://content.pstmn.io/624aed75-7ac7-46bd-a8c2-e1dd447a116a/aW1hZ2UucG5n\">",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Embedded Loans and Payments",
			"item": [
				{
					"name": "Pay with wallet",
					"item": [
						{
							"name": "Initialize Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is 'Successful'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful\");\r",
											"});\r",
											"pm.test(\"Data contains the reference\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"reference\");\r",
											"    pm.expect(jsonData.data.reference).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Data contains the URL\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.have.property(\"url\");\r",
											"    pm.expect(jsonData.data.url).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 5000,\n    \"description\": \"Payment for beans, yam and egg\",\n    \"organization_id\": \"37a749d808e46495a8da1e5352d03cae\",\n    \"callback_url\": \"https://lendsqr.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}payments/initialize",
									"host": [
										"{{base_url}}payments"
									],
									"path": [
										"initialize"
									]
								},
								"description": "This endpoint generates the payment link that would open a web page that would allow customers to log into the lender's account and initiate the relevant payment.\n\nYou would provide us with a callback URL that would serve as a redirect for customers once payment has been made."
							},
							"response": [
								{
									"name": "Initialize Payment",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 5000,\n    \"description\": \"Payment for beans and egg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}payments/initialize",
											"host": [
												"{{base_url}}payments"
											],
											"path": [
												"initialize"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "b90557c9-1497-414f-86b4-9f89d3361e52"
										},
										{
											"key": "Last-Modified",
											"value": "Sun, 23 Jul 2023 18:55:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "108"
										},
										{
											"key": "ETag",
											"value": "W/\"6c-IGmND8VHD+WKmPUjHpwPnBLnwk8\""
										},
										{
											"key": "Date",
											"value": "Sun, 23 Jul 2023 18:55:20 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"reference\": \"9ZyuoKwn3ENs12YU\",\n        \"url\": \"9ZyuoKwn3ENs12YU\"\n    }\n}"
								}
							]
						},
						{
							"name": "Query Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate the response message is 'Successful'\r",
											"pm.test(\"Response message is 'Successful'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"// Validate the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate the data status is 'pending'\r",
											"pm.test(\"Data status is 'pending'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.status).to.eql(\"pending\");\r",
											"});\r",
											"\r",
											"// Validate the data contains the reference '84gSR1PwhENWfDTc'\r",
											"pm.test(\"Data contains the reference '84gSR1PwhENWfDTc'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"reference\");\r",
											"pm.expect(jsonData.data.reference).to.eql(\"84gSR1PwhENWfDTc\");\r",
											"});\r",
											"\r",
											"// Validate the data contains the correct amount of 5000\r",
											"pm.test(\"Data contains the correct amount of 5000\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"amount\");\r",
											"pm.expect(jsonData.data.amount).to.eql(5000);\r",
											"});\r",
											"\r",
											"// Validate the data contains the correct description 'Payment for beans, yam and egg'\r",
											"pm.test(\"Data contains the correct description 'Payment for beans, yam and egg'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"description\");\r",
											"pm.expect(jsonData.data.description).to.eql(\"Payment for beans, yam and egg\");\r",
											"});\r",
											"\r",
											"// Validate the data contains the callback URL 'https://lendsqr.com'\r",
											"pm.test(\"Data contains the callback URL 'https://lendsqr.com'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"callback_url\");\r",
											"pm.expect(jsonData.data.callback_url).to.eql(\"https://lendsqr.com\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}payments/:reference",
									"host": [
										"{{base_url}}payments"
									],
									"path": [
										":reference"
									],
									"variable": [
										{
											"key": "reference",
											"value": "84gSR1PwhENWfDTc"
										}
									]
								},
								"description": "This endpoint is used to query the details of the payment made."
							},
							"response": [
								{
									"name": "Query Payment",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer sk_test_5N5FcApMCqN0DsDH3r6Ve292Q2peJGC2ZIynMab0",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url}}payments/9ZyuoKwn3ENs12YU",
											"host": [
												"{{base_url}}payments"
											],
											"path": [
												"9ZyuoKwn3ENs12YU"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "43840982-dee5-49a3-acda-4650c01a11cf"
										},
										{
											"key": "Last-Modified",
											"value": "Sun, 23 Jul 2023 18:56:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "369"
										},
										{
											"key": "ETag",
											"value": "W/\"171-zzSQFFLrRm98A9YAgrI4FQiBWHs\""
										},
										{
											"key": "Date",
											"value": "Sun, 23 Jul 2023 18:56:44 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": {\n        \"id\": 3,\n        \"org_id\": 136,\n        \"distributor_id\": 2,\n        \"transaction_id\": null,\n        \"reference\": \"9ZyuoKwn3ENs12YU\",\n        \"amount\": 5000,\n        \"description\": \"Payment for beans and egg\",\n        \"callback_url\": null,\n        \"created_on\": \"2023-07-23T17:55:20.000Z\",\n        \"created_by\": null,\n        \"modified_on\": null,\n        \"modified_by\": null,\n        \"deleted_flag\": 0,\n        \"deleted_on\": null,\n        \"deleted_by\": null\n    }\n}"
								}
							]
						}
					],
					"description": "Our Pay with Wallet solution allows your customers to make payment for their purchases via various account holding platforms. This solution is viable to customers who have accounts with a lender, on the Lendsqr platform that is activated for this program."
				}
			],
			"description": "## Introduction\n\nEmbedded loans and payments offers third-party distributors with Lendsqr the option to offer loans and payment options to customers on their platform outside Lendsqr.\n\n## How it works\n\nEmbedded loans and payments is a way to ensure seamless experience for your customers via Lendsqr's services and lenders.\n\n### Embedded Loans\n\nWith embedded loans, you can fuel Buy-Now-Pay-Later projects or generic loan services on your platform. Lendsqr's lenders are equipped to perform adequate KYC and power the loans that you give to your customers to service their needs on your platform. In the case of BNPL projects, increase your checkout rate as customers are now ensure of loans to finance their purchases.\n\n### Embedded Payments\n\nWith embedded payments, customers don't need to get loans with a Lendsqr lender. Provided that you have established a relationship with one of our lenders, your customers can now easily pay for purchases using the funds in their account with your partnered lender. This will make payments and checkout on your platform super seamless and easy.\n\n**NOTE**: Embedded payments only serves for checkout services.\n\n## Getting started\n\n1. Sign up on pecunia.lendsqr.com and contact [api@lendsqr.com](https://) when done. Ensure you provide a valid business account during the sign up process as this will be the account payment will be made to.\n2. After contacting us, your profile would be set up as a distributor with Lendsqr.\n3. To test the APIs available, you would be provided with a test API key to carry out the integration.\n4. After confirmation of what you have implemented, your production API key will be sent to you over secure channels.\n    \n\n## Concepts to understand\n\n1. Third-party distributor: An external platform (not a Lendsqr lender) that wishes to offer their customers loans or payment options powered by a Lendsqr lender. This platform/partner could be an e-commerce platform wishing to offer BNPL opportunities to their customers with embedded loans or multiple check out options with embedded payment capabilities.\n2. Lender: This is a business that gives out loans via the Lendsqr platform.\n3. Customers: The end users on the distributor platform."
		},
		{
			"name": "Data for Lenders",
			"item": [
				{
					"name": "Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the HTTP status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate that the 'success' field in the response body is true\r",
									"pm.test(\"Response 'success' field is true\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.success).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate that the 'data' array contains objects with the 'name' property\r",
									"pm.test(\"Data array contains objects with 'name' property\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"// Check if 'data' is an array\r",
									"pm.expect(jsonData.data).to.be.an('array');\r",
									"// Loop through each object in the 'data' array\r",
									"jsonData.data.forEach(function(item) {\r",
									"// Check if the object has a 'name' property\r",
									"pm.expect(item).to.have.property('name');\r",
									"});\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}data/options",
							"host": [
								"{{base_url}}data"
							],
							"path": [
								"options"
							]
						},
						"description": "This endpoint is used to get the data options or sources available for a lender.\n\n#### Response Payload\n\n| Field | Type | Description |\n| --- | --- | --- |\n| name | `string` | \"Users\" |\n| description | `string` | \"Get details of all users that have signed up to the system. This may include users who have not completed their onboarding\" |\n| path | `string` | \"/users\" |"
					},
					"response": [
						{
							"name": "Data Options",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}data/options",
									"host": [
										"{{base_url}}data"
									],
									"path": [
										"options"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 28 Feb 2024 22:55:02 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "286bceb2-43a0-4cc6-a001-131f13a66e3c"
								},
								{
									"key": "Last-Modified",
									"value": "Wed, 28 Feb 2024 22:54:57 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"690-sCrGprb2Do2p61q0+9QpVPX9kU8\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "85cc40948afa636a-LHR"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"name\": \"Users\",\n            \"description\": \"Get details of all users that have signed up to the system. This may include users who have not completed their onboarding\",\n            \"path\": \"/users\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get details of all loans for any users. You can filter with user_id, status, and approved_on columns\",\n            \"path\": \"/loans\"\n        },\n        {\n            \"name\": \"Options\",\n            \"description\": \"List all available data options. To get the data for any path, please call with base_url/<path>\",\n            \"path\": \"/options\"\n        },\n        {\n            \"name\": \"Lenders\",\n            \"description\": \"Get the list of all the lenders within the system. Should not appear for anyone\",\n            \"path\": \"/lenders\"\n        },\n        {\n            \"name\": \"Loan analytics\",\n            \"description\": \"Analytics of loans for organization grouped by month. You can filter with the month column\",\n            \"path\": \"/analytics/loans\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get transactions for loans. You can filter data using the loan_id and created_on columns\",\n            \"path\": \"/loans/transactions\"\n        },\n        {\n            \"name\": \"Loans\",\n            \"description\": \"Get schedules for specific loans. You can filter data using the loan_id and created_on columns\",\n            \"path\": \"/loans/schedules\"\n        },\n        {\n            \"name\": \"Transactions\",\n            \"description\": \"Get details of all user transactions. You can filter data using the user_id column\",\n            \"path\": \"/transactions\"\n        },\n        {\n            \"name\": \"Top offers\",\n            \"description\": \"Get the list of top loan offers in the Lendsqr ecosystem.\",\n            \"path\": \"/lenders/top-offers\"\n        },\n        {\n            \"name\": \"Lenders loans\",\n            \"description\": \"Get the list of all the loans that all lenders in the Lendsqr ecosystem have\",\n            \"path\": \"/lenders/loans\"\n        },\n        {\n            \"name\": \"Cards\",\n            \"description\": \"Get details of all cards.\",\n            \"path\": \"/cards\"\n        },\n        {\n            \"name\": \"Bank Accounts\",\n            \"description\": \"Get details of all bank accounts.\",\n            \"path\": \"/bank-accounts\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the HTTP status code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate that the 'success' field in the response body is true\r",
									"pm.test(\"Response 'success' field is true\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.success).to.be.true;\r",
									"});\r",
									"\r",
									"// Validate that the 'data' array is empty\r",
									"pm.test(\"Data array is empty\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}data/users",
							"host": [
								"{{base_url}}data"
							],
							"path": [
								"users"
							]
						},
						"description": "| Field | Type | Description |\n| --- | --- | --- |\n| org_id | `integer` | 9999 |\n| organization | `string` | \"Example Lender\" |\n| id | `integer` | 44691 |\n| first_name | `string` | \"Ado\\`\" |\n| last_name | `string` | \"John Sule\" |\n| full_name | `string` | \"Ado John Sule\" |\n| phone_number | `string` | \"07062569817\" |\n| phone_number_hash | `string` | \"318c88a8e1fcfc049114e69128275b4d\" |\n| email | `string` | \"Ado@lendsqr.com\" |\n| bvn | `string` | \"21234567890\" |\n| bvn_phone_number | `string` | \"08012345678\" |\n| `date`_of_birth | `date` | \"1990-09-10\" |\n| age | `integer` | 26 |\n| gender | `string` | \"Female\" |\n| stage_id | `integer` | 6 |\n| stage | `string` | \"done\" |\n| photo_url | `string` | \"[https://image.url.com\"](https://image.url.com) |\n| mifos_client_id | `string` | \"41053\" |\n| client_id | `string` | \"41053\" |\n| savings_id | `string` | \"47197\" |\n| account_number | `string` | \"IDR000047197----------\" |\n| account_balance | `float` | 1144.25 |\n| account_name | `string` | \"Ado John Sule\" |\n| referral_code | `string` | \"B7YEHI\" |\n| device_id | `string` | \"bd96e5e050c0529d\" |\n| notification_token | `string` | \"****\" |\n| device_type | `string` | \"Android\" |\n| tier_id | `integer` | 24 |\n| tier | `string` | \"Tier 3\" |\n| withdrawal_limit | `integer` | 1000000 |\n| deposit_limit | `integer` | 20000 |\n| borrower_max_cumulative_amount | `float` | 999999999999 |\n| support_email | `string` | \"support@example.com\" |\n| loan_count | `integer` | 14 |\n| savings_plans | `integer` | 0 |\n| savings_target | `integer` | 0 |\n| savings_balance | `integer` | 0 |\n| activated | `integer` | 1 |\n| activated_on | `datetime` |  |\n| blacklisted | `integer` | 0 |\n| reason | `string` | null |\n| selfie_bvn_check | `string` | \"Successful\" |\n| selfie_id_check | `string` | \"Successful\" |\n| nok_first_name | `string` | \"Evelyn\" |\n| nok_last_name | `string` | \"Peters\" |\n| nok_phone_number | `string` | \"09099494342\" |\n| nok_email | `string` | \"evelyn@lendsqr.com\" |\n| nok_address | `string` | \"Ayodele Oke-Owo Street Gbagada\" |\n| nok_relationship | `string` | \"Others\" |\n| marital_status | `string` | \"Single\" |\n| no_of_dependent | `string` | \"0\" |\n| type_of_residence | `string` | \"Parents Apartment\" |\n| educational_attainment | `string` | \"BSc, HND and Other Equivalent\" |\n| employment_status | `string` | \"Employed\" |\n| sector_of_employment | `string` | \"Other Financial\" |\n| current_employer | `string` | \"Lendsqr\" |\n| employment_category | `string` | \"Private Company\" |\n| monthly_net_income | `string` | \"200,000 - 399,999\" |\n| work_start_date | `datetime` |  |\n| work_email | `string` | \"ado@example.com\" |\n| country | `string` | \"NGA\" |\n| city | `string` | \"Gbagada\" |\n| lga | `string` | \"Kosofe\" |\n| street | null | null |\n| nearest_landmark | `string` | \"Deeper Life Church\" |\n| longitude | `float` | \\-102.0837554932 |\n| latitude | `float` | 47.421546936 |\n| address | `string` | \"Lagos\" |"
					},
					"response": [
						{
							"name": "Users",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}data/users",
									"host": [
										"{{base_url}}data"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 28 Feb 2024 23:05:31 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Request-ID",
									"value": "2b47c2f1-dea7-4c19-8250-e05e43f48ed0"
								},
								{
									"key": "Last-Modified",
									"value": "Wed, 28 Feb 2024 23:05:29 GMT"
								},
								{
									"key": "ETag",
									"value": "W/\"39515-/Q53k0DdvDTRus/qCQzKY2+97vM\""
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "85cc5004cf47636a-LHR"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"org_id\": 9999,\n            \"organization\": \"Example Lender\",\n            \"id\": 44691,\n            \"first_name\": \"Ado`\",\n            \"last_name\": \"John Sule\",\n            \"full_name\": \"Ado John Sule\",\n            \"phone_number\": \"07062569817\",\n            \"phone_number_hash\": \"318c88a8e1fcfc049114e69128275b4d\",\n            \"email\": \"Ado@lendsqr.com\",\n            \"bvn\": \"21234567890\",\n            \"bvn_phone_number\": \"08012345678\",\n            \"date_of_birth\": \"1990-09-10\",\n            \"age\": 26,\n            \"gender\": \"Female\",\n            \"stage_id\": 6,\n            \"stage\": \"done\",\n            \"photo_url\": \"https://image.url.com\",\n            \"mifos_client_id\": \"41053\",\n            \"client_id\": \"41053\",\n            \"savings_id\": \"47197\",\n            \"account_number\": \"IDR000047197----------\",\n            \"account_balance\": 1144.25,\n            \"account_name\": \"Ado John Sule\",\n            \"referral_code\": \"B7YEHI\",\n            \"referred_by\": null,\n            \"referrer_name\": null,\n            \"referrer_email\": null,\n            \"referrer_phone\": null,\n            \"referrer_code\": null,\n            \"device_id\": \"bd96e5e050c0529d\",\n            \"notification_token\": \"********************************\",\n            \"device_type\": \"Android\",\n            \"tier_id\": 24,\n            \"tier\": \"Tier 3\",\n            \"withdrawal_limit\": 1000000,\n            \"deposit_limit\": 20000,\n            \"borrower_max_cumulative_amount\": 999999999999,\n            \"support_email\": \"support@example.com\",\n            \"loan_count\": 14,\n            \"savings_plans\": 0,\n            \"savings_target\": 0,\n            \"savings_balance\": 0,\n            \"activated\": 1,\n            \"activated_on\": \"2021-02-01T10:15:08.000Z\",\n            \"blacklisted\": 0,\n            \"reason\": null,\n            \"selfie_bvn_check\": \"Successful\",\n            \"selfie_id_check\": \"Successful\",\n            \"last_login_date\": \"2023-10-02T23:20:36.000Z\",\n            \"created_on\": \"2021-02-01T11:02:00.000Z\",\n            \"modified_on\": \"2023-10-02T23:20:36.000Z\",\n            \"deleted_on\": null,\n            \"nok_first_name\": \"Evelyn\",\n            \"nok_last_name\": \"Peters\",\n            \"nok_phone_number\": \"09099494342\",\n            \"nok_email\": \"evelyn@lendsqr.com\",\n            \"nok_address\": \"Ayodele Oke-Owo Street  Gbagada\",\n            \"nok_relationship\": \"Others\",\n            \"marital_status\": \"Single\",\n            \"no_of_dependent\": \"0\",\n            \"type_of_residence\": \"Parents Apartment\",\n            \"educational_attainment\": \"BSc, HND and Other Equivalent\",\n            \"employment_status\": \"Employed\",\n            \"sector_of_employment\": \"Other Financial\",\n            \"current_employer\": \"Lendsqr\",\n            \"employment_category\": \"Private Company\",\n            \"monthly_net_income\": \"200,000 - 399,999\",\n            \"work_start_date\": \"2020-11-15T23:00:00.000Z\",\n            \"work_email\": \"ado@example.com\",\n            \"country\": \"NGA\",\n            \"city\": \"Gbagada\",\n            \"lga\": \"Kosofe\",\n            \"street\": null,\n            \"nearest_landmark\": \"Deeper Life Church\",\n            \"longitude\": -102.0837554932,\n            \"latitude\": 47.421546936,\n            \"address\": \"Lagos\",\n            \"process_time\": \"2024-02-28T03:20:26.000Z\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "### Introduction\n\nLenders and their customers generate a lot of data that are important for lenders outside of the Lendsqr ecosystem. For example, lenders may want to use new customer information to drive drip marketing. Or they may want to use loan data to send customized reminders to borrowers.\n\nIrrespective of what the lender wants, Lendsqr allows lenders to use Adjutor APIs to get these data. There are almost infinite limits to the data a lender can get for their customers, transactions, audit activities, etc.\n\nThe Adjutor data layer provides the functionality using simple RESTful APIs.\n\n#### Common Parameters\n\n- Getting individual data: Some endpoints allow you to get individual data instead of everything, which at times can be overwhelming. For example, you can get /data/users/:id.\n    \n\n- Pagination: Every data endpoint supports pagination with the default being 100.\n    \n\n- Filtering: Some data endpoints support filtering. The filters available would be provided in the description\n    \n\n- Process time: Some data endpoints are not online in real-time as they are processed as part of our batch operations. These data options would have process time to show the time the data set was created"
		},
		{
			"name": "Operational Services",
			"item": [
				{
					"name": "Profile",
					"item": [
						{
							"name": "Get Adjutor Services Pricing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'Successful'\r",
											"pm.test(\"Response message is 'Successful'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); // Added missing variable declaration\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Validate that the data array is empty\r",
											"pm.test(\"Data array is empty\", function () {\r",
											"    var jsonData = pm.response.json(); // Added missing variable declaration\r",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}profile/pricing",
									"host": [
										"{{base_url}}profile"
									],
									"path": [
										"pricing"
									]
								},
								"description": "This endpoint is used to obtain the current pricing of the API services. Kindly note that pricing may be different from lender to lender due to commercial negotiations that could have provide some lenders with a different pricing due to volume commitment.\n\nIf you want a cheaper price, which usually comes with a minimum monthly spend, please contact your account manager at growth@lendsqr.com."
							},
							"response": [
								{
									"name": "Get Adjutor Services Pricing",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}profile/pricing",
											"host": [
												"{{base_url}}profile"
											],
											"path": [
												"pricing"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 14 Aug 2023 13:29:17 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "ffce023d-0a92-4484-ac47-7923b86002b5"
										},
										{
											"key": "Last-Modified",
											"value": "Mon, 14 Aug 2023 13:29:16 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"2bc-wuQroduQ50LikXzniRq/QTN48cQ\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f698bb35ab303d6-LIS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": [\n        {\n            \"name\": \"Adjutor Oraculi Scoring\",\n            \"amount\": 15\n        },\n        {\n            \"name\": \"Adjutor Name Inquiry\",\n            \"amount\": 0\n        },\n        {\n            \"name\": \"Adjutor Name Inquiry with BVN\",\n            \"amount\": 10\n        },\n        {\n            \"name\": \"Adjutor Karma Lookup\",\n            \"amount\": 10\n        },\n        {\n            \"name\": \"Adjutor BVN Verification\",\n            \"amount\": 20\n        },\n        {\n            \"name\": \"Adjutor Image Compare\",\n            \"amount\": 30\n        },\n        {\n            \"name\": \"Adjutor Ecosystem Lookup\",\n            \"amount\": 25\n        },\n        {\n            \"name\": \"Adjutor Bank List\",\n            \"amount\": 0\n        },\n        {\n            \"name\": \"Adjutor CRC\",\n            \"amount\": 100\n        },\n        {\n            \"name\": \"Adjutor Oraculi Central\",\n            \"amount\": 100\n        },\n        {\n            \"name\": \"Adjutor Credit Registry\",\n            \"amount\": 1500\n        },\n        {\n            \"name\": \"Adjutor Oraculi Accounts\",\n            \"amount\": 10\n        },\n        {\n            \"name\": \"Adjutor Oraculi Statements\",\n            \"amount\": 25\n        },\n        {\n            \"name\": \"Adjutor Oraculi Analytics\",\n            \"amount\": 25\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Get Wallet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'Successful'\r",
											"pm.test(\"Response message is 'Successful'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}profile/wallet",
									"host": [
										"{{base_url}}profile"
									],
									"path": [
										"wallet"
									]
								},
								"description": "This request is used to obtain the wallet information on the lender's profile."
							},
							"response": []
						}
					]
				},
				{
					"name": "Miscellaneous",
					"item": [
						{
							"name": "Get List of Banks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'Successful'\r",
											"pm.test(\"Response message is 'Successful'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"Successful\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}banks",
									"host": [
										"{{base_url}}banks"
									]
								},
								"description": "This endpoint is used for getting banks and their codes.\n\n#### Response Code\n\n| Field | Type | Description |\n| --- | --- | --- |\n| name | `string` | The name of the bank (e.g., \"Access Bank\"). |\n| shortcode | `string` | A unique code for the bank issued by the Central Bank of Nigeria (e.g., \"044\"). |\n| longcode | `string` | A unique code for the bank on the NIBSS network (e.g., \"000014\"). |"
							},
							"response": [
								{
									"name": "Get List of Banks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}banks",
											"host": [
												"{{base_url}}banks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 14 Aug 2023 13:17:55 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "1c82274f-e038-4de1-998d-8d16b721d3c5"
										},
										{
											"key": "Last-Modified",
											"value": "Mon, 14 Aug 2023 13:17:53 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"dcc-ImNirDzX8D8qoFcwASXEATbzskg\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f697b067a3ed42c-LOS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"Successful\",\n    \"data\": [\n        {\n            \"name\": \"3line\",\n            \"shortcode\": null,\n            \"longcode\": \"110005\"\n        },\n        {\n            \"name\": \"Access Bank\",\n            \"shortcode\": \"044\",\n            \"longcode\": \"000014\"\n        },\n        {\n            \"name\": \"Alat by Wema\",\n            \"shortcode\": \"035\",\n            \"longcode\": \"000017\"\n        },\n        {\n            \"name\": \"ASO Savings and Loans\",\n            \"shortcode\": \"401\",\n            \"longcode\": \"090001\"\n        },\n        {\n            \"name\": \"Bankly MBF\",\n            \"shortcode\": \"\",\n            \"longcode\": \"090529\"\n        },\n        {\n            \"name\": \"Carbon\",\n            \"shortcode\": \"565\",\n            \"longcode\": \"100026\"\n        },\n        {\n            \"name\": \"CEMCS Microfinance Bank\",\n            \"shortcode\": \"50823\",\n            \"longcode\": \"090154\"\n        },\n        {\n            \"name\": \"Citibank Nigeria\",\n            \"shortcode\": \"023\",\n            \"longcode\": \"000009\"\n        },\n        {\n            \"name\": \"Conpro MFB (Kredi Bank)\",\n            \"shortcode\": \"50200\",\n            \"longcode\": \"090380\"\n        },\n        {\n            \"name\": \"Coronation Merchant Bank\",\n            \"shortcode\": \"559\",\n            \"longcode\": \"060001\"\n        },\n        {\n            \"name\": \"Dot pay\",\n            \"shortcode\": null,\n            \"longcode\": \"090470\"\n        },\n        {\n            \"name\": \"Ecobank Nigeria\",\n            \"shortcode\": \"050\",\n            \"longcode\": \"000010\"\n        },\n        {\n            \"name\": \"Ekondo Microfinance Bank\",\n            \"shortcode\": \"562\",\n            \"longcode\": \"090097\"\n        },\n        {\n            \"name\": \"Fairmoney MFB\",\n            \"shortcode\": \"\",\n            \"longcode\": \"090551\"\n        },\n        {\n            \"name\": \"FBNQuest Merchant Bank\",\n            \"shortcode\": \"911\",\n            \"longcode\": \"060002\"\n        },\n        {\n            \"name\": \"Fidelity Bank\",\n            \"shortcode\": \"070\",\n            \"longcode\": \"000007\"\n        },\n        {\n            \"name\": \"Firmus MFB\",\n            \"shortcode\": \"51314\",\n            \"longcode\": \"090366\"\n        },\n        {\n            \"name\": \"First Bank of Nigeria\",\n            \"shortcode\": \"011\",\n            \"longcode\": \"000016\"\n        },\n        {\n            \"name\": \"First City Monument Bank\",\n            \"shortcode\": \"214\",\n            \"longcode\": \"000003\"\n        },\n        {\n            \"name\": \"FSDH Merchant Bank\",\n            \"shortcode\": \"501\",\n            \"longcode\": \"400001\"\n        },\n        {\n            \"name\": \"Globus Bank\",\n            \"shortcode\": \"103\",\n            \"longcode\": \"000027\"\n        },\n        {\n            \"name\": \"Guaranty Trust Bank\",\n            \"shortcode\": \"058\",\n            \"longcode\": \"000013\"\n        },\n        {\n            \"name\": \"Hasal Microfinance Bank\",\n            \"shortcode\": \"50383\",\n            \"longcode\": \"090121\"\n        },\n        {\n            \"name\": \"Heritage Bank\",\n            \"shortcode\": \"030\",\n            \"longcode\": \"000020\"\n        },\n        {\n            \"name\": \"Jaiz Bank\",\n            \"shortcode\": \"301\",\n            \"longcode\": \"000006\"\n        },\n        {\n            \"name\": \"Keystone Bank\",\n            \"shortcode\": \"082\",\n            \"longcode\": \"000002\"\n        },\n        {\n            \"name\": \"Kuda Bank\",\n            \"shortcode\": \"50211\",\n            \"longcode\": \"090267\"\n        },\n        {\n            \"name\": \"MoniePoint Bank\",\n            \"shortcode\": \"50515\",\n            \"longcode\": \"090405\"\n        },\n        {\n            \"name\": \"Nova Merchant Bank\",\n            \"shortcode\": \"561\",\n            \"longcode\": \"060003\"\n        },\n        {\n            \"name\": \"Nuntius Internal Bank\",\n            \"shortcode\": \"999999\",\n            \"longcode\": \"999999\"\n        },\n        {\n            \"name\": \"One Finance\",\n            \"shortcode\": \"565\",\n            \"longcode\": \"100026\"\n        },\n        {\n            \"name\": \"Palmpay\",\n            \"shortcode\": \"100033\",\n            \"longcode\": \"100033\"\n        },\n        {\n            \"name\": \"Parallex Bank\",\n            \"shortcode\": \"526\",\n            \"longcode\": \"090004\"\n        },\n        {\n            \"name\": \"paycom (Opay)\",\n            \"shortcode\": \"305\",\n            \"longcode\": \"100004\"\n        },\n        {\n            \"name\": \"Polaris Bank\",\n            \"shortcode\": \"076\",\n            \"longcode\": \"000008\"\n        },\n        {\n            \"name\": \"Providus Bank\",\n            \"shortcode\": \"101\",\n            \"longcode\": \"000023\"\n        },\n        {\n            \"name\": \"Rand Merchant Bank Nigeria\",\n            \"shortcode\": \"502\",\n            \"longcode\": \"000024\"\n        },\n        {\n            \"name\": \"Rubies MFB\",\n            \"shortcode\": \"125\",\n            \"longcode\": \"090175\"\n        },\n        {\n            \"name\": \"Sparkle Microfinance Bank\",\n            \"shortcode\": \"51310\",\n            \"longcode\": \"090325\"\n        },\n        {\n            \"name\": \"Stanbic IBTC Bank\",\n            \"shortcode\": \"221\",\n            \"longcode\": \"000012\"\n        },\n        {\n            \"name\": \"Standard Chartered Bank\",\n            \"shortcode\": \"068\",\n            \"longcode\": \"000021\"\n        },\n        {\n            \"name\": \"Sterling Bank\",\n            \"shortcode\": \"232\",\n            \"longcode\": \"000001\"\n        },\n        {\n            \"name\": \"Suntrust Bank\",\n            \"shortcode\": \"100\",\n            \"longcode\": \"000022\"\n        },\n        {\n            \"name\": \"Support MFB\",\n            \"shortcode\": \"295\",\n            \"longcode\": \"090446\"\n        },\n        {\n            \"name\": \"TAJ Bank\",\n            \"shortcode\": \"302\",\n            \"longcode\": \"000026\"\n        },\n        {\n            \"name\": \"TCF MFB\",\n            \"shortcode\": \"51211\",\n            \"longcode\": \"090115\"\n        },\n        {\n            \"name\": \"Titan Trust Bank\",\n            \"shortcode\": \"102\",\n            \"longcode\": \"000025\"\n        },\n        {\n            \"name\": \"Union Bank of Nigeria\",\n            \"shortcode\": \"032\",\n            \"longcode\": \"000018\"\n        },\n        {\n            \"name\": \"United Bank For Africa\",\n            \"shortcode\": \"033\",\n            \"longcode\": \"000004\"\n        },\n        {\n            \"name\": \"Unity Bank\",\n            \"shortcode\": \"215\",\n            \"longcode\": \"000011\"\n        },\n        {\n            \"name\": \"VFD\",\n            \"shortcode\": \"566\",\n            \"longcode\": \"090110\"\n        },\n        {\n            \"name\": \"Wema Bank\",\n            \"shortcode\": \"035\",\n            \"longcode\": \"000017\"\n        },\n        {\n            \"name\": \"Zenith Bank\",\n            \"shortcode\": \"057\",\n            \"longcode\": \"000015\"\n        }\n    ],\n    \"meta\": {\n        \"cost\": 0,\n        \"balance\": 1225\n    }\n}"
								}
							]
						},
						{
							"name": "Get Status Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the 'status' in the response body is true\r",
											"pm.test(\"Response 'status' is true\", function () {\r",
											"    pm.expect(pm.response.json().status).to.be.true;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}status",
									"host": [
										"{{base_url}}status"
									]
								},
								"description": "This endpoint is used to obtain the status of systems under Adjutor."
							},
							"response": [
								{
									"name": "Get Status Check",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}status",
											"host": [
												"{{base_url}}status"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 14 Aug 2023 13:18:09 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "2c08234b-24ec-4518-9893-6334a9701fe8"
										},
										{
											"key": "ETag",
											"value": "W/\"323-kZyzG8ZmWrOKUR10s/0qZ95jhMM\""
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "7f697b679c7fd42c-LOS"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": true,\n    \"data\": [\n        {\n            \"service\": \"adjutor-oraculi-scoring\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-name-inquiry\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-name-inquiry-bvn\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-karma-lookup\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-bvn-verification\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-image-compare\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-ecosystem-lookup\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-bank-list\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-crc\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-firstcentral\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-credit-registry\",\n            \"success\": false\n        },\n        {\n            \"service\": \"adjutor-oraculi-accounts\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-statement\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-analytics\",\n            \"success\": true\n        },\n        {\n            \"service\": \"adjutor-oraculi-models\",\n            \"success\": true\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "The Miscellaneous folder contains resources and tools for miscellaneous tasks, such as obtaining bank codes and checking the status of the AdjÃºtor API service to ensure that it is functioning properly. This folder provides a convenient way to access information and troubleshoot any issues, helping you stay informed and in control of your system at all times."
				}
			],
			"description": "These endpoints are a collection of APIs to be used by a lender or an integrator to get information about their accounts, profiles, and wallet balances."
		},
		{
			"name": "Direct Debit",
			"item": [
				{
					"name": "Banks",
					"item": [
						{
							"name": "Get All Banks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'success'\r",
											"pm.test(\"Response message is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Validate that the data object contains an array called 'data'\r",
											"pm.test(\"Data object contains an array called 'data'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"data\");\r",
											"pm.expect(jsonData.data.data).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}direct-debit/banks?limit=100&page=1&sort_dir=ASC",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"banks"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort_dir",
											"value": "ASC"
										}
									]
								},
								"description": "This endpoints returns the lis of banks able to provide direct debit authorizations on their customers' accounts.\n\n#### Response Body Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `Integer` | Unique identifier for the bank. |\n| name | `string` | Name of the bank. |\n| bank_code | `string` | This is the CBN code associated with the bank. It is usually 3 digits for commercial banks and 5 digits for microfinance banks. |\n| institution_code | `string` | This is the NIBSS code associated with the bank. It is is usually 6 digits long. For commercial banks, the code is in the format 0000XX where X is from 0 to 99. |\n| url | `string` | URL pointing to the bank's logo or image. |"
							},
							"response": [
								{
									"name": "Get All Banks",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/banks?limit=100&page=1&sort_dir=ASC",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"banks"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "sort_dir",
													"value": "ASC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "713b4442-1cf6-46bb-8a39-85de0ad54d89"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 16:28:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "6395"
										},
										{
											"key": "ETag",
											"value": "W/\"18fb-Pj1/ZMbxWk/ZZFF1vrvEYAOh3tM\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 16:28:31 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": 1,\n                \"name\": \"Access Bank\",\n                \"bank_code\": \"044\",\n                \"institution_code\": \"000014\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/044.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 7,\n                \"name\": \"Ecobank Nigeria\",\n                \"bank_code\": \"050\",\n                \"institution_code\": \"000010\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/050.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 11,\n                \"name\": \"Fidelity Bank\",\n                \"bank_code\": \"070\",\n                \"institution_code\": \"000007\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/070.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 10,\n                \"name\": \"First Bank of Nigeria\",\n                \"bank_code\": \"011\",\n                \"institution_code\": \"000016\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/011.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 12,\n                \"name\": \"First City Monument Bank\",\n                \"bank_code\": \"214\",\n                \"institution_code\": \"000003\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/214.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 16,\n                \"name\": \"Guaranty Trust Bank\",\n                \"bank_code\": \"058\",\n                \"institution_code\": \"000013\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/058.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 18,\n                \"name\": \"Keystone Bank\",\n                \"bank_code\": \"082\",\n                \"institution_code\": \"000002\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/082.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 22,\n                \"name\": \"Kuda Bank\",\n                \"bank_code\": \"50211\",\n                \"institution_code\": \"090267\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/50211.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 25,\n                \"name\": \"Polaris Bank\",\n                \"bank_code\": \"076\",\n                \"institution_code\": \"000008\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/076.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 24,\n                \"name\": \"Providus Bank\",\n                \"bank_code\": \"101\",\n                \"institution_code\": \"000023\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/101.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 27,\n                \"name\": \"Stanbic IBTC Bank\",\n                \"bank_code\": \"221\",\n                \"institution_code\": \"000012\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/221.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 28,\n                \"name\": \"Standard Chartered Bank\",\n                \"bank_code\": \"068\",\n                \"institution_code\": \"000021\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/068.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 29,\n                \"name\": \"Sterling Bank\",\n                \"bank_code\": \"232\",\n                \"institution_code\": \"000001\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/232.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 34,\n                \"name\": \"Suntrust Bank\",\n                \"bank_code\": \"100\",\n                \"institution_code\": \"000022\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/100.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 36,\n                \"name\": \"Union Bank of Nigeria\",\n                \"bank_code\": \"032\",\n                \"institution_code\": \"000018\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/032.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 40,\n                \"name\": \"United Bank For Africa\",\n                \"bank_code\": \"033\",\n                \"institution_code\": \"000004\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/033.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 37,\n                \"name\": \"Unity Bank\",\n                \"bank_code\": \"215\",\n                \"institution_code\": \"000011\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/215.png\",\n                \"activation_amount\": \"100.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":100,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Wema Bank\",\n                \"bank_code\": \"035\",\n                \"institution_code\": \"000017\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/035.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            },\n            {\n                \"id\": 41,\n                \"name\": \"Zenith Bank\",\n                \"bank_code\": \"057\",\n                \"institution_code\": \"000015\",\n                \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/057.png\",\n                \"activation_amount\": \"50.00\",\n                \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n            }\n        ],\n        \"meta\": {\n            \"records\": 19,\n            \"page\": \"1\",\n            \"pages\": 1,\n            \"page_size\": \"100\"\n        }\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						},
						{
							"name": "Get Details of a Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'success'\r",
											"pm.test(\"Response message is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Validate that the data object contains the properties 'id', 'name', 'bank_code', and 'institution_code'\r",
											"pm.test(\"Data object contains the properties 'id', 'name', 'bank_code', and 'institution_code'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"id\");\r",
											"pm.expect(jsonData.data.id).to.eql(1);\r",
											"pm.expect(jsonData.data).to.have.property(\"name\");\r",
											"pm.expect(jsonData.data.name).to.eql(\"Access Bank\");\r",
											"pm.expect(jsonData.data).to.have.property(\"bank_code\");\r",
											"pm.expect(jsonData.data.bank_code).to.eql(\"044\");\r",
											"pm.expect(jsonData.data).to.have.property(\"institution_code\");\r",
											"pm.expect(jsonData.data.institution_code).to.eql(\"000014\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}direct-debit/banks/:bank_id",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"banks",
										":bank_id"
									],
									"variable": [
										{
											"key": "bank_id",
											"value": "1"
										}
									]
								},
								"description": "Retrieve the details of a specific account.\n\n#### Query Params\n\n| Field | Type | Description |\n| --- | --- | --- |\n| bank_id | `Integer` | **Required**. The ID of the bank you want to get the details of. |\n\n#### Response Body Field\n\n| Field | Type | Description |\n| --- | --- | --- |\n| status | `string` | The status of the response. |\n| message | `string` | A message indicating the result of the operation. |\n| data | `object` | The data object contains specific information related to the response. |\n| ID | `number` | The ID associated with the bank. |\n| bank | `string` | The name of the bank. |\n| bank_code | `string` | The bank code associated with the bank. |\n| institutional_code | `string` | The institution code associated with the bank. |\n| url | `string` | The URL pointing to the bank's logo image |"
							},
							"response": [
								{
									"name": "Get Details of a Bank",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/banks/:bank_id",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"banks",
												":bank_id"
											],
											"variable": [
												{
													"key": "bank_id",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "c711d34d-4378-472a-a43c-5a603a435c21"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 16:48:19 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "403"
										},
										{
											"key": "ETag",
											"value": "W/\"193-NjjN04voJ7aLorbmK2F0o9mtDHg\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 16:48:22 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"id\": 1,\n        \"name\": \"Access Bank\",\n        \"bank_code\": \"044\",\n        \"institution_code\": \"000014\",\n        \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/044.png\",\n        \"activation_amount\": \"50.00\",\n        \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						}
					],
					"description": "These endpoints are used to get the list of Nigerian banks, details of specific banks. They can also be used to bank account verification.\n\n#### Note\n\nNot all banks are included as some banks have either not implemented their direct debit service, or they return DO NOT HONOR on direct debit requests.\n\nIf a bank is missing, please email [support@lendsqr.com](https://mailto:support@lendsqr.com) for assistance or more details."
				},
				{
					"name": "Mandates",
					"item": [
						{
							"name": "Get All Mandates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'success'\r",
											"pm.test(\"Response message is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that the response status is 'success'\r",
											"pm.test(\"Response status is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that the 'data' object contains an array called 'data'\r",
											"pm.test(\"Data object contains an array called 'data'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data).to.have.property(\"data\");\r",
											"pm.expect(jsonData.data.data).to.be.an('array');\r",
											"});\r",
											"\r",
											"// Validate that the first object in the 'data' array has the property 'id'\r",
											"pm.test(\"First object in 'data' array has property 'id'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"var firstObject = jsonData.data.data[0];\r",
											"pm.expect(firstObject).to.have.property(\"id\");\r",
											"pm.expect(firstObject.id).to.eql(1377);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}direct-debit/mandates?limit=10&page=1",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"mandates"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "This endpoint is used to retrieve mandates or information for a specific mandate. The `reference_number` is the unique mandate ID generated when the mandate was created.\n\n#### Query Params\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reference_number | `number` | **Required.** The reference number of the mandate you want to get the details of. |\n\n#### Response Body Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| file | `number` | **Required.** The reference number of the mandate you want to get the details of. |"
							},
							"response": [
								{
									"name": "Get All Mandates",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/mandates?limit=10&page=1",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"mandates"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "c5aac60f-faca-4ef8-b833-c8e33e49d55d"
										},
										{
											"key": "Last-Modified",
											"value": "Thu, 28 Mar 2024 01:39:18 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "19847"
										},
										{
											"key": "ETag",
											"value": "W/\"4d87-euutde1hC8uaGi+/KLj9cb0KDrk\""
										},
										{
											"key": "Date",
											"value": "Thu, 28 Mar 2024 01:39:22 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": 10,\n                \"session_id\": \"999999231016152258600000000000\",\n                \"reference_number\": \"RC00000/1507/000000000000\",\n                \"account_number\": \"2150000090\",\n                \"account_name\": \"TEST ACCOUNT\",\n                \"frequency\": \"daily\",\n                \"bvn\": \"22000000076\",\n                \"phone_number\": \"08130050033\",\n                \"email\": \"email@example.com\",\n                \"start_date\": \"2023-10-31T23:00:00.000Z\",\n                \"end_date\": \"2023-12-29T23:00:00.000Z\",\n                \"narration\": \"Rand\",\n                \"address\": \"Ikate\",\n                \"minimum_amount\": \"0.00\",\n                \"amount\": \"500.00\",\n                \"status\": \"initiated\",\n                \"schedule\": 0,\n                \"type\": \"manual\",\n                \"NIBSS_workflow_status\": null,\n                \"NIBSS_workflow_status_description\": null,\n                \"debit_type\": \"all\",\n                \"created_on\": \"2023-10-16 14:22:59\",\n                \"schedules\": [],\n                \"bank\": {\n                    \"id\": 42,\n                    \"name\": \"Zenith Bank\",\n                    \"bank_code\": \"057\",\n                    \"institution_code\": \"000015\",\n                    \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/057.png\",\n                    \"meta\": {\n                        \"mandate-activation-amount\": 50,\n                        \"mandate-activation-bank\": \"Paystack-Titan\",\n                        \"mandate-activation-account-number\": \"9880218357\"\n                    }\n                },\n                \"beneficiary\": {\n                    \"id\": 2,\n                    \"account_number\": \"54000000000\",\n                    \"account_name\": \"DD OPERATIONS\",\n                    \"bvn\": \".\",\n                    \"last_transaction_date\": null,\n                    \"status\": \"active\",\n                    \"created_on\": \"2023-09-22 15:29:32\",\n                    \"bank\": {\n                        \"id\": 24,\n                        \"name\": \"Providus Bank\",\n                        \"bank_code\": \"101\",\n                        \"institution_code\": \"000023\",\n                        \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/101.png\"\n                    }\n                },\n                \"activation_instruction\": \"This mandate is currently in initiated status. To activate, the bank direct debit officers need to log into the NIBSS CMMS platform to authorize or approve. The customer may also call their bank account manager for more details.\"\n            }\n        ],\n        \"meta\": {\n            \"records\": 1,\n            \"page\": \"1\",\n            \"pages\": 1,\n            \"page_size\": \"10\"\n        }\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Get All Transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'success'\r",
											"pm.test(\"Response message is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}direct-debit/transactions?limit=10&page=1",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								},
								"description": "Retrieve the transactions related to the mandates associated with the API key.\n\n#### Response Body Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `integer` | The ID of the transaction. |\n| amount | String | The amount of the transaction. |\n| mandate_id | `integer` | The ID of the associated mandate. |\n| mandate_account_name | String | The account name associated with the mandate. |\n| mandate_account_number | `integer` | The account number associated with the mandate. |\n| mandate_bvn | String | The Bank Verification Number (BVN) associated with the mandate. |\n| reference | String | The reference number of the transaction. |\n| narration | String | The description or purpose of the transaction. |\n| beneficiary_id | `integer` | The ID of the recipient of the mandate debits. |\n| beneficiary_account_name | String | The account name of the recipient of the mandate debits. |\n| beneficiary_account_number | `integer` | The account number of the recipient of the mandate debits. |\n| beneficiary_bvn | String | The Bank Verification Number (BVN) of the beneficiary. |\n| session_id | String | The session ID associated with the transaction. |\n| status | String | The status of the transaction (e.g., success, failed). |\n| created_on | String | The date and time when the transaction was created. |\n| mandate_bank | `object` | The bank details associated with the mandate (see bank fields below). |\n\n#### Mandate Bank Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `integer` | The ID of the bank. |\n| name | String | The name of the bank. |\n| bank_code | String | The bank code associated with the bank. |\n| institution_code | String | The institution code associated with the bank. |\n| url | String | The URL of the bank (if available). |"
							},
							"response": [
								{
									"name": "Get All Transactions",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/transactions?limit=10&page=1",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"transactions"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "9c990955-2d05-463a-9968-8d8ef8aef90d"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 17:05:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "7731"
										},
										{
											"key": "ETag",
											"value": "W/\"1e33-JscIFlPIDztpaYzPXGIWueotanI\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 17:05:13 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": 15,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsOsdGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 14,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 13,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsdmGCSgGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 12,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 11,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 10,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 9,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 8,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 7,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            },\n            {\n                \"id\": 6,\n                \"amount\": \"500\",\n                \"mandate_id\": 7,\n                \"mandate_account_name\": \"vee Test\",\n                \"mandate_account_number\": \"1780004070\",\n                \"mandate_bvn\": \"22222222222\",\n                \"reference\": \"DD-cU26qsO05mGCSGn\",\n                \"narration\": \"Direct Debit Transfer\",\n                \"session_id\": \"999999230920215225299534241477\",\n                \"status\": \"successful\",\n                \"created_on\": \"2023-05-11 07:07:01\",\n                \"mandate_bank\": {\n                    \"name\": \"Test Bank 1\",\n                    \"bank_code\": \"998\",\n                    \"institution_code\": \"999998\",\n                    \"url\": null\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1145578/1599/000000000\"\n                }\n            }\n        ],\n        \"meta\": {\n            \"records\": 15,\n            \"page\": \"1\",\n            \"pages\": 2,\n            \"page_size\": \"10\"\n        }\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						},
						{
							"name": "Get Details of a Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate that the HTTP status code is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validate that the response message is 'success'\r",
											"pm.test(\"Response message is 'success'\", function () {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"// Validate that 'message' is present and is a string\r",
											"pm.test(\"Message property is present and is a string\", function () {\r",
											"    var jsonData = pm.response.json(); \r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}direct-debit/transactions?reference=DD-cU26qsO05mGCSGn",
									"host": [
										"{{base_url}}direct-debit"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "reference",
											"value": "DD-cU26qsO05mGCSGn"
										}
									]
								},
								"description": "Retrieves the details of a specific transaction.\n\n#### Params Query\n\n| Field | Type | Description |\n| --- | --- | --- |\n| reference | String | **Required**. The reference number of the mandate transaction you want to get the details of. |\n\n#### Response Body Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `integer` | The ID of the transaction. |\n| amount | String | The amount of the transaction. |\n| mandate_id | `integer` | The ID of the associated mandate. |\n| mandate_account_name | String | The account name associated with the mandate. |\n| mandate_account_number | `integer` | The account number associated with the mandate. |\n| mandate_bvn | String | The Bank Verification Number (BVN) associated with the mandate. |\n| reference | String | The reference number of the transaction. |\n| narration | String | The description or purpose of the transaction. |\n| beneficiary_id | `integer` | The ID of the recipient of the mandate debits. |\n| beneficiary_account_name | String | The account name of the recipient of the mandate debits. |\n| beneficiary_account_number | `integer` | The account number of the recipient of the mandate debits. |\n| beneficiary_bvn | String | The Bank Verification Number (BVN) of the beneficiary. |\n| session_id | String | The session ID associated with the transaction. |\n| status | String | The status of the transaction (e.g., success, failed). |\n| created_on | String | The date and time when the transaction was created. |\n| mandate_bank | `object` | The bank details associated with the mandate (see bank fields below). |\n\n##### Mandate Bank Fields\n\n| Field | Type | Description |\n| --- | --- | --- |\n| id | `integer` | The ID of the bank. |\n| name | String | The name of the bank. |\n| bank_code | String | The bank code associated with the bank. |\n| institution_code | String | The institution code associated with the bank. |\n| url | String | The URL of the bank (if available). |"
							},
							"response": [
								{
									"name": "Get Details of a Transaction",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}direct-debit/transactions?reference=DD-WCo3KTTUn1dZgAV",
											"host": [
												"{{base_url}}direct-debit"
											],
											"path": [
												"transactions"
											],
											"query": [
												{
													"key": "reference",
													"value": "DD-WCo3KTTUn1dZgAV"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-Request-ID",
											"value": "203650f6-fee5-4452-baec-6779de722573"
										},
										{
											"key": "Last-Modified",
											"value": "Wed, 27 Mar 2024 17:07:36 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "904"
										},
										{
											"key": "ETag",
											"value": "W/\"388-xErTWr+FkJV09fWlwB7b45G78l4\""
										},
										{
											"key": "Date",
											"value": "Wed, 27 Mar 2024 17:07:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"success\",\n    \"message\": \"success\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": 2592,\n                \"amount\": \"250.00\",\n                \"mandate_id\": 478,\n                \"mandate_account_name\": \"AKINSANYA ADEOLUWA OLORUNTOMI\",\n                \"mandate_account_number\": \"0421008622\",\n                \"mandate_bvn\": \"22000000076\",\n                \"reference\": \"DD-WCo3KTTUn1dZgAV\",\n                \"narration\": \"Direct debit for mandate schedule 699\",\n                \"session_id\": \"110069240327000044440000237994\",\n                \"status\": \"failed\",\n                \"created_on\": \"2024-03-26 23:00:35\",\n                \"mandate_bank\": {\n                    \"id\": 16,\n                    \"name\": \"Guaranty Trust Bank\",\n                    \"bank_code\": \"058\",\n                    \"institution_code\": \"000013\",\n                    \"url\": \"https://lendstack-s3.s3.us-east-2.amazonaws.com/bank_logos/058.png\",\n                    \"activation_amount\": \"50.00\",\n                    \"meta\": \"{\\\"mandate-activation-amount\\\":50,\\\"mandate-activation-bank\\\":\\\"Paystack-Titan\\\",\\\"mandate-activation-account-number\\\":\\\"9880218357\\\"}\"\n                },\n                \"mandate\": {\n                    \"reference_number\": \"RC1544159/1517/0001380571\"\n                }\n            }\n        ],\n        \"meta\": {\n            \"records\": 1,\n            \"page\": 1,\n            \"pages\": 1,\n            \"page_size\": 10\n        }\n    },\n    \"meta\": {\n        \"cost\": 1,\n        \"balance\": 1010\n    }\n}"
								}
							]
						}
					]
				}
			],
			"description": "## Getting started\n\nDirect debit is a payment method that allows an account holder to grant authorization for a biller or lender to take money from their bank account for services as of when due. Direct debit is similar to debit cards in its ability to debit a customerâ€™s account with prior authorization.\n\nDirect debit helps businesses that require recurring payments on specific dates with fixed amounts, such as insurance premiums, loan repayments, service subscriptions, or variable recurring payments on different dates (e.g., postpaid lines, and electricity usage).\n\nThis direct debit API facilitates the process for Service Providers (referred to as Billers) to generate debit mandate instructions on their client's/customers' bank accounts for services rendered or products sold.\n\nThese debit mandate instructions are created as digital versions of physical instructions duly signed by the account owners (clients/customers). Once generated, the mandate instructions are automatically sent to the bank where the account is held for review and approval. The approval process requires the bank to contact the account owner to authorize the mandate, which typically takes 24 to 48 hours.\n\nThe system automatically assigns a unique mandate code to each initiated mandate. This mandate code is used to initiate a direct debit transaction on the bank account associated with the debit mandate instruction.\n\nThis document provides a comprehensive overview and detailed specifications of the Direct Debit APIs, including all the necessary information for seamless integration into your respective applications.\n\n## Direct debit process\n\nDirect debit mandates follow a streamlined process that may take at least 2 hours from activation to when they are available for debits. These steps are:\n\n- Mandate creation\n- Mandate activation\n- Setup for debit\n- Transactions\n    \n\n### Mandate creation\n\nThe first step is the creation of mandate using the API defined in this collection. As soon as the mandate is created, you should inform the customer of the next steps about how to activate the mandate.\n\nFrom a best practices point of view, the customer should be informed on your app, by email, and SMS.\n\n### Mandate activation\n\nActivation of the mandate is usually done by the transfer of a N50 (or N100 for banks where the minimum transfer amount is N100) to designated bank accounts operated by NIBSS. The customer has 168 hours (7 days) to send this amount if not the mandate is automatically canceled.\n\nImmediately the activation amount is received at either of the banks, the mandate is automatically activated. However, it is not available for debit at this time.\n\n#### Banks for mandate activation\n\nThe following are the authorized banks which customers should use for direct debit mandate activation.\n\n| **Fidelity Bank** | **Paystack Titan** |\n| --- | --- |\n| Account: 9020025928  <br>Bank: Fidelity Bank Plc.  <br>You can transfer from USSD, mobile app or internet banking | Account: 9880218357  <br>Bank: Paystack-Titan  <br>You can transfer from your mobile app and internet banking |\n\n### Setup for debit\n\nThere are usually some backend processes done by NIBSS that then processes the accounts for debit and this may take up to 2 hours before completion. If you try to debit the mandate before this time, it would return an error message such as \"do not honor\"."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://adjutor.lendsqr.com/v2/",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "access_token",
			"value": "sk_live_qqwADauEY7jjBP5WVE2xehEnXEqRd8l6oKnq7q1A",
			"type": "string"
		}
	]
}